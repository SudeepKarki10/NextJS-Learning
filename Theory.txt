There are two types of rendering environment :

1.Client side Rendering: 
->Components are rendered at the clients browser 
-> We have to bundle all of our components and send it to client for rendering as our app grows larger the bundle and needed larger memory on client side .
-> SEO bot that browses and index our website cannot view our components as it cannot execute js code due to which it is not possible to search engine optimize website rendered in client side
-> sensitive datas like API key etc can get exposed to the client side


1.server side Rendering: 
->Components are rendered at the server side so smaller bundles are sent to the client 
->so it is resources efficient
-> as the components are rendered at the server and the content of it is sent to the clients side so, SEO bot can view and index our data 
->> more secure to keep secret data like api


cons of server side rendering :
-> we cannot do interactivity like:
1.cannot listen to browser events
2. cannot access browser APIs
3. cannot Maintain state
3. cannot useEffects 


<-----Data fetching------>

1. Fetching on the client

----> useState() + useEffect()

whenever a data is fetched in the client side then client will render the components and fetches the data from the server and then fills the component with data and renders it in client side which is causing an extra round trip to the server and may expose the sensitive data to the client 


so, whenever possible we should fetch data in the server components 
2. Fetching on the server 



********Caching********
-> caching is a technique to store frequently accessed data in a temporary storage , file system or network etc. area so that it can be accessed faster

  const res = await fetch("https://jsonplaceholder.typicode.com/users", {
    //If data is frequently changing then set cache: "no-store",
    //To keep data fresh for certain amount of time set

    //Data caching is possible in the fetch() only and is not available in the third party fetch package like axios
    next: { revalidate: 10 },
  });



<-------Query strings----->

if the folder /user contains page.tsx so that it can be accessed with the link : http://localhost:3000/users

We can pass the data through the url which is called as query string . for e.g: http://localhost:3000/users?sortOrder=id  

->sortOrder is a query string with the value='id'

and in order to get access of this query string we can do like using searchParams as :

interface Props {
  searchParams: { sortOrder: string };
}

const UserPage = async ({ searchParams: { sortOrder } }: Props) => {
  return ( );
}

now we can pass this searchParams to the components inside the /users folder as Props :

const UserPage = async ({ searchParams: { sortOrder } }: Props) => {
  return (
    <>
      //passing the query string as props to UserTable component as 
      <UserTable sortOrder={sortOrder} />
    </>
  );
};


<-------Handling not found pages---->

If we create 'not-found.tsx' in the root of app folder then it will be shown for any unaccessible pages in the root app directory 

If we want to show the Error pages with different Error message than that of not-found.tsx in root folder of app we can create not-found.tsx inside the specific component folder . 
for e.g: 
if we want to display "User doesn't exist' error page when user tries to access the url : localhos://users/12 then we can create not-fount.tsx inside the app/users folder 

and to access this error pages in other component we can simply use : notFound();

notFound(); should be imported as : 
import { useRouter, notFound } from "next/navigation";



<-------Validation-------->


export async function DELETE(request: NextRequest, { params: { id } }: Props) {
  const body = await request.json();

  if (!body.name) {
    return NextResponse.json({ error: "Name is required" }, { status: 402 });
  }

  if (id > 10) {
    return NextResponse.json(
      { error: "User with that id doesn't exists" },
      { status: 402 }
    );
  }

  return NextResponse.json(
    {
      message: `Object with the following ${id} is Deleted`,
    },
    { status: 200 }
  );
}


if the body object has few number of properties then we can validate mannually like above but if there are number of data properties to be validated then we need Library to validate it .



<------Prisma------>
It is an ORM( Object Relational Mapper) for Node.js and typescript 

-> to connect with the database we need to search for : prisma connection string 
Then, 

we specify the provider in the datasource 


-> To sync the database schema with the prisma schema 

command : npx prisma migrate dev

we need to run same command if we change any schema model in the prisma to migrate the schema and sync with the database


<-----Creating Prisma Client ----->
Why Use a Singleton Pattern for Prisma Client in Next.js?
->Database Connection Efficiency:
Creating a new instance of Prisma Client for every request can be resource-intensive and slow down your application. By using a singleton pattern (like your prismaClientSingleton function), you ensure there's only one instance of Prisma Client per server instance. This improves efficiency by reducing overhead from repeated connection setup and teardown.
Context Management:

->In server-side applications like Next.js API routes or serverless functions, managing database connections across different requests and server instances is critical. Singleton patterns help maintain a single point of access to the database connection throughout the application lifecycle.

Memory Management:
-> Keeping a single instance of Prisma Client helps in managing memory effectively. This is important in environments where memory allocation and deallocation impact overall application performance.

Global Access:
-> Declaring Prisma Client as a global variable (prismaGlobal in your example) ensures that it can be accessed consistently across different parts of your application without the need to pass it around explicitly.

Performance:
->By initializing Prisma Client once and reusing it, you reduce the latency associated with establishing new database connections for each request. This results in faster response times for your API endpoints.



<------Cloudinary is a cloud services like Azure, Google storage etc.for storing data like images , videos etc ----->

Go to ; next.Cloudinary 

npm i next-cloudinary

open .env file and place the url for the cloud_name like:
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME="<Your Cloud Name>"


To see the media uploaded we need to go to Assets-> media library 


<-------NEXTAUTH------------>
NextAuth.js is a popular authentication library for Next.js applications. It provides a simple and flexible way to authenticate the routes to the users.

firstly, 
install next-auth as : npm i next-auth
create a new file in pages/api/auth/[...nextauth].js
import NextAuth from 'next-auth'
import Google from 'next-auth/providers/google'
set .env file with : NEXTAUTH_URL = http://localhost:3000
                     NEXTAUTH_SECRET = asbfkjas$K@#JKJFSDBF$$&#7393


now,
in  api/auth/[...nextauth]/routes.tsx: 

import NextAuth from "next-auth";
import GoogleProvider from "next-auth/providers/google";

const handler = NextAuth({
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
  ],
});
export { handler as GET, handler as POST };

NextAuth is a function from the NextAuth.js library that creates an authentication handler.
GoogleProvider is a provider from NextAuth.js that enables authentication with Google OAuth.
Inside NextAuth, you configure the authentication providers you want to use. In this case, it's using Google OAuth provider with the clientId and clientSecret fetched from environment variables (process.env.GOOGLE_CLIENT_ID and process.env.GOOGLE_CLIENT_SECRET).

Exporting the Handler:
export { handler as GET, handler as POST };

This code exports the handler function as GET and POST.
In Next.js API routes, depending on the HTTP method (GET, POST, etc.), different functions can handle the request. By exporting handler as GET and POST, Next.js understands that this single handler function will handle both GET and POST requests to the /api/auth/[...nextauth] endpoint.

api/auth/[...nextauth] Endpoint:
The api/auth/[...nextauth] endpoint is a dynamic API route provided by Next.js.
The [...nextauth] part allows the route to match any paths starting with /api/auth/. This is particularly useful for handling various authentication-related requests, such as /api/auth/signin, /api/auth/signout, /api/auth/callback/[provider], etc.
NextAuth.js uses this endpoint to manage authentication flows, such as initiating sign-in with Google, handling OAuth callbacks, and managing session cookies.


Now, to provide session to all the component we have to :
import { SessionProvider } from "next-auth/react";

and wrap the children inside SessionProvider

but it will throw error like : 
Unhandled Runtime Error
Error: React Context is unavailable in Server Components

solution can be : simply using "use  client" to convert the component to clients component but it will throw another error :
Error: 
  Ã— You are attempting to export "metadata" from a component marked with "use client", which is disallowed. Either remove the export, or the "use client" directive.

so, to solve this we have to create new folder in app/auth/Provider.tsx : 
import React, { ReactNode } from "react";
import { SessionProvider } from "next-auth/react";

const AuthProvider = ({ children }: { children: ReactNode }) => {
  return;
  <SessionProvider>{children}</SessionProvider>;
};

export default AuthProvider;

so the AuthProvider acts as the wrapper for SessionProvider



<-----Accessing the session data in client---->
import { useSession } from "next-auth/react";

Distructuring the session data as :
const { data: session, status } = useSession();

status to check if it's in the loading state , authenticate or unauthenticated 

for eg: if user is authenticate then displaying the username from the session data as :
session.user.name

This is an example of accessing session data in client .


<-----Accessing data on Server ---------->
